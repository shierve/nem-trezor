/** Declaration file generated by dts-gen */

export const algo: {
  AES: {
    $super: {
      $super: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
          reset: any;
        };
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        finalize: any;
        init: any;
        ivSize: number;
        keySize: number;
        mixIn: any;
        process: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        mode: {
          $super: {
            $super: {
              clone: any;
              create: any;
              extend: any;
              init: any;
              mixIn: any;
            };
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          Decryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: {
              $super: any;
              Decryptor: any;
              Encryptor: any;
              clone: any;
              create: any;
              createDecryptor: any;
              createEncryptor: any;
              extend: any;
              init: any;
              mixIn: any;
              processBlock: any;
            };
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          Encryptor: {
            $super: any;
            Decryptor: {
              $super: any;
              Decryptor: any;
              Encryptor: any;
              clone: any;
              create: any;
              createDecryptor: any;
              createEncryptor: any;
              extend: any;
              init: any;
              mixIn: any;
              processBlock: any;
            };
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        padding: {
          pad: any;
          unpad: any;
        };
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      finalize: any;
      init: any;
      ivSize: number;
      keySize: number;
      mixIn: any;
      process: any;
      reset: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
      mode: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        Decryptor: {
          $super: any;
          Decryptor: any;
          Encryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
          processBlock: any;
        };
        Encryptor: {
          $super: any;
          Decryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          Encryptor: any;
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
          processBlock: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      padding: {
        pad: any;
        unpad: any;
      };
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    decryptBlock: any;
    encryptBlock: any;
    extend: any;
    finalize: any;
    init: any;
    ivSize: number;
    keySize: number;
    mixIn: any;
    process: any;
    reset: any;
  };
  DES: {
    $super: {
      $super: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
          reset: any;
        };
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        finalize: any;
        init: any;
        ivSize: number;
        keySize: number;
        mixIn: any;
        process: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        mode: {
          $super: {
            $super: {
              clone: any;
              create: any;
              extend: any;
              init: any;
              mixIn: any;
            };
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          Decryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: {
              $super: any;
              Decryptor: any;
              Encryptor: any;
              clone: any;
              create: any;
              createDecryptor: any;
              createEncryptor: any;
              extend: any;
              init: any;
              mixIn: any;
              processBlock: any;
            };
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          Encryptor: {
            $super: any;
            Decryptor: {
              $super: any;
              Decryptor: any;
              Encryptor: any;
              clone: any;
              create: any;
              createDecryptor: any;
              createEncryptor: any;
              extend: any;
              init: any;
              mixIn: any;
              processBlock: any;
            };
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        padding: {
          pad: any;
          unpad: any;
        };
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      finalize: any;
      init: any;
      ivSize: number;
      keySize: number;
      mixIn: any;
      process: any;
      reset: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
      mode: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        Decryptor: {
          $super: any;
          Decryptor: any;
          Encryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
          processBlock: any;
        };
        Encryptor: {
          $super: any;
          Decryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          Encryptor: any;
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
          processBlock: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      padding: {
        pad: any;
        unpad: any;
      };
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    decryptBlock: any;
    encryptBlock: any;
    extend: any;
    finalize: any;
    init: any;
    ivSize: number;
    keySize: number;
    mixIn: any;
    process: any;
    reset: any;
  };
  EvpKDF: {
    $super: {
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      hasher: {
        $super: {
          $super: {
            $super: {
              clone: any;
              create: any;
              extend: any;
              init: any;
              mixIn: any;
            };
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
            reset: any;
          };
          blockSize: number;
          cfg: {
            $super: {
              clone: any;
              create: any;
              extend: any;
              init: any;
              mixIn: any;
            };
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          finalize: any;
          init: any;
          mixIn: any;
          reset: any;
          update: any;
        };
        blockSize: number;
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        finalize: any;
        init: any;
        mixIn: any;
        reset: any;
        update: any;
      };
      init: any;
      iterations: number;
      keySize: number;
      mixIn: any;
    };
    clone: any;
    compute: any;
    create: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  HMAC: {
    $super: {
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    finalize: any;
    init: any;
    mixIn: any;
    reset: any;
    update: any;
  };
  MD5: {
    $super: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      finalize: any;
      init: any;
      mixIn: any;
      reset: any;
      update: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    finalize: any;
    init: any;
    mixIn: any;
    reset: any;
    update: any;
  };
  PBKDF2: {
    $super: {
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      hasher: {
        $super: {
          $super: {
            $super: {
              clone: any;
              create: any;
              extend: any;
              init: any;
              mixIn: any;
            };
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
            reset: any;
          };
          blockSize: number;
          cfg: {
            $super: {
              clone: any;
              create: any;
              extend: any;
              init: any;
              mixIn: any;
            };
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          finalize: any;
          init: any;
          mixIn: any;
          reset: any;
          update: any;
        };
        blockSize: number;
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        finalize: any;
        init: any;
        mixIn: any;
        reset: any;
        update: any;
      };
      init: any;
      iterations: number;
      keySize: number;
      mixIn: any;
    };
    clone: any;
    compute: any;
    create: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  RC4: {
    $super: {
      $super: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
          reset: any;
        };
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        finalize: any;
        init: any;
        ivSize: number;
        keySize: number;
        mixIn: any;
        process: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      finalize: any;
      init: any;
      ivSize: number;
      keySize: number;
      mixIn: any;
      process: any;
      reset: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    finalize: any;
    init: any;
    ivSize: number;
    keySize: number;
    mixIn: any;
    process: any;
    reset: any;
  };
  RC4Drop: {
    $super: {
      $super: {
        $super: {
          $super: {
            $super: {
              clone: any;
              create: any;
              extend: any;
              init: any;
              mixIn: any;
            };
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
            reset: any;
          };
          cfg: {
            $super: {
              clone: any;
              create: any;
              extend: any;
              init: any;
              mixIn: any;
            };
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          finalize: any;
          init: any;
          ivSize: number;
          keySize: number;
          mixIn: any;
          process: any;
          reset: any;
        };
        blockSize: number;
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        finalize: any;
        init: any;
        ivSize: number;
        keySize: number;
        mixIn: any;
        process: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      finalize: any;
      init: any;
      ivSize: number;
      keySize: number;
      mixIn: any;
      process: any;
      reset: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      drop: number;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    finalize: any;
    init: any;
    ivSize: number;
    keySize: number;
    mixIn: any;
    process: any;
    reset: any;
  };
  RIPEMD160: {
    $super: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      finalize: any;
      init: any;
      mixIn: any;
      reset: any;
      update: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    finalize: any;
    init: any;
    mixIn: any;
    reset: any;
    update: any;
  };
  Rabbit: {
    $super: {
      $super: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
          reset: any;
        };
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        finalize: any;
        init: any;
        ivSize: number;
        keySize: number;
        mixIn: any;
        process: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      finalize: any;
      init: any;
      ivSize: number;
      keySize: number;
      mixIn: any;
      process: any;
      reset: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    finalize: any;
    init: any;
    ivSize: number;
    keySize: number;
    mixIn: any;
    process: any;
    reset: any;
  };
  RabbitLegacy: {
    $super: {
      $super: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
          reset: any;
        };
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        finalize: any;
        init: any;
        ivSize: number;
        keySize: number;
        mixIn: any;
        process: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      finalize: any;
      init: any;
      ivSize: number;
      keySize: number;
      mixIn: any;
      process: any;
      reset: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    finalize: any;
    init: any;
    ivSize: number;
    keySize: number;
    mixIn: any;
    process: any;
    reset: any;
  };
  SHA1: {
    $super: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      finalize: any;
      init: any;
      mixIn: any;
      reset: any;
      update: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    finalize: any;
    init: any;
    mixIn: any;
    reset: any;
    update: any;
  };
  SHA224: {
    $super: {
      $super: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
          reset: any;
        };
        blockSize: number;
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        finalize: any;
        init: any;
        mixIn: any;
        reset: any;
        update: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      finalize: any;
      init: any;
      mixIn: any;
      reset: any;
      update: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    finalize: any;
    init: any;
    mixIn: any;
    reset: any;
    update: any;
  };
  SHA256: {
    $super: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      finalize: any;
      init: any;
      mixIn: any;
      reset: any;
      update: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    finalize: any;
    init: any;
    mixIn: any;
    reset: any;
    update: any;
  };
  SHA3: {
    $super: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      finalize: any;
      init: any;
      mixIn: any;
      reset: any;
      update: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
      outputLength: number;
    };
    clone: any;
    create: any;
    extend: any;
    finalize: any;
    init: any;
    mixIn: any;
    reset: any;
    update: any;
  };
  SHA384: {
    $super: {
      $super: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
          reset: any;
        };
        blockSize: number;
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        finalize: any;
        init: any;
        mixIn: any;
        reset: any;
        update: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      finalize: any;
      init: any;
      mixIn: any;
      reset: any;
      update: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    finalize: any;
    init: any;
    mixIn: any;
    reset: any;
    update: any;
  };
  SHA512: {
    $super: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      finalize: any;
      init: any;
      mixIn: any;
      reset: any;
      update: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    finalize: any;
    init: any;
    mixIn: any;
    reset: any;
    update: any;
  };
  TripleDES: {
    $super: {
      $super: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
          reset: any;
        };
        cfg: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        finalize: any;
        init: any;
        ivSize: number;
        keySize: number;
        mixIn: any;
        process: any;
        reset: any;
      };
      blockSize: number;
      cfg: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        mode: {
          $super: {
            $super: {
              clone: any;
              create: any;
              extend: any;
              init: any;
              mixIn: any;
            };
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          Decryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: {
              $super: any;
              Decryptor: any;
              Encryptor: any;
              clone: any;
              create: any;
              createDecryptor: any;
              createEncryptor: any;
              extend: any;
              init: any;
              mixIn: any;
              processBlock: any;
            };
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          Encryptor: {
            $super: any;
            Decryptor: {
              $super: any;
              Decryptor: any;
              Encryptor: any;
              clone: any;
              create: any;
              createDecryptor: any;
              createEncryptor: any;
              extend: any;
              init: any;
              mixIn: any;
              processBlock: any;
            };
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        padding: {
          pad: any;
          unpad: any;
        };
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      finalize: any;
      init: any;
      ivSize: number;
      keySize: number;
      mixIn: any;
      process: any;
      reset: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
      mode: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        Decryptor: {
          $super: any;
          Decryptor: any;
          Encryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
          processBlock: any;
        };
        Encryptor: {
          $super: any;
          Decryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          Encryptor: any;
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
          processBlock: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      padding: {
        pad: any;
        unpad: any;
      };
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    decryptBlock: any;
    encryptBlock: any;
    extend: any;
    finalize: any;
    init: any;
    ivSize: number;
    keySize: number;
    mixIn: any;
    process: any;
    reset: any;
  };
};

export const enc: {
  Base64: {
    parse: any;
    stringify: any;
  };
  Hex: {
    parse: any;
    stringify: any;
  };
  Latin1: {
    parse: any;
    stringify: any;
  };
  Utf16: {
    parse: any;
    stringify: any;
  };
  Utf16BE: {
    parse: any;
    stringify: any;
  };
  Utf16LE: {
    parse: any;
    stringify: any;
  };
  Utf8: {
    parse: any;
    stringify: any;
  };
};

export const format: {
  Hex: {
    parse: any;
    stringify: any;
  };
  OpenSSL: {
    parse: any;
    stringify: any;
  };
};

export const kdf: {
  OpenSSL: {
    execute: any;
  };
};

export const lib: {
  Base: {
    clone: any;
    create: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  BlockCipher: {
    $super: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        reset: any;
      };
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      finalize: any;
      init: any;
      ivSize: number;
      keySize: number;
      mixIn: any;
      process: any;
      reset: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
      mode: {
        $super: {
          $super: {
            clone: any;
            create: any;
            extend: any;
            init: any;
            mixIn: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        Decryptor: {
          $super: any;
          Decryptor: any;
          Encryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
          processBlock: any;
        };
        Encryptor: {
          $super: any;
          Decryptor: {
            $super: any;
            Decryptor: any;
            Encryptor: any;
            clone: any;
            create: any;
            createDecryptor: any;
            createEncryptor: any;
            extend: any;
            init: any;
            mixIn: any;
            processBlock: any;
          };
          Encryptor: any;
          clone: any;
          create: any;
          createDecryptor: any;
          createEncryptor: any;
          extend: any;
          init: any;
          mixIn: any;
          processBlock: any;
        };
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      padding: {
        pad: any;
        unpad: any;
      };
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    finalize: any;
    init: any;
    ivSize: number;
    keySize: number;
    mixIn: any;
    process: any;
    reset: any;
  };
  BlockCipherMode: {
    $super: {
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  BufferedBlockAlgorithm: {
    $super: {
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    init: any;
    mixIn: any;
    reset: any;
  };
  Cipher: {
    $super: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
      reset: any;
    };
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    finalize: any;
    init: any;
    ivSize: number;
    keySize: number;
    mixIn: any;
    process: any;
    reset: any;
  };
  CipherParams: {
    $super: {
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    init: any;
    mixIn: any;
    toString: any;
  };
  Hasher: {
    $super: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
      reset: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    finalize: any;
    init: any;
    mixIn: any;
    reset: any;
    update: any;
  };
  PasswordBasedCipher: {
    $super: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        format: {
          parse: any;
          stringify: any;
        };
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      decrypt: any;
      encrypt: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    cfg: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        format: {
          parse: any;
          stringify: any;
        };
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      format: {
        parse: any;
        stringify: any;
      };
      init: any;
      kdf: {
        execute: any;
      };
      mixIn: any;
    };
    clone: any;
    create: any;
    decrypt: any;
    encrypt: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  SerializableCipher: {
    $super: {
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      format: {
        parse: any;
        stringify: any;
      };
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    decrypt: any;
    encrypt: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  StreamCipher: {
    $super: {
      $super: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
        reset: any;
      };
      cfg: {
        $super: {
          clone: any;
          create: any;
          extend: any;
          init: any;
          mixIn: any;
        };
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      finalize: any;
      init: any;
      ivSize: number;
      keySize: number;
      mixIn: any;
      process: any;
      reset: any;
    };
    blockSize: number;
    cfg: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    finalize: any;
    init: any;
    ivSize: number;
    keySize: number;
    mixIn: any;
    process: any;
    reset: any;
  };
  WordArray: {
    $super: {
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clamp: any;
    clone: any;
    concat: any;
    create: any;
    extend: any;
    init: any;
    mixIn: any;
    random: any;
    toString: any;
  };
};

export const mode: {
  CBC: {
    $super: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    Decryptor: {
      $super: any;
      Decryptor: any;
      Encryptor: {
        $super: any;
        Decryptor: any;
        Encryptor: any;
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        init: any;
        mixIn: any;
        processBlock: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    Encryptor: {
      $super: any;
      Decryptor: {
        $super: any;
        Decryptor: any;
        Encryptor: any;
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        init: any;
        mixIn: any;
        processBlock: any;
      };
      Encryptor: any;
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  CFB: {
    $super: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    Decryptor: {
      $super: any;
      Decryptor: any;
      Encryptor: {
        $super: any;
        Decryptor: any;
        Encryptor: any;
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        init: any;
        mixIn: any;
        processBlock: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    Encryptor: {
      $super: any;
      Decryptor: {
        $super: any;
        Decryptor: any;
        Encryptor: any;
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        init: any;
        mixIn: any;
        processBlock: any;
      };
      Encryptor: any;
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  CTR: {
    $super: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    Decryptor: {
      $super: any;
      Decryptor: any;
      Encryptor: any;
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    Encryptor: {
      $super: any;
      Decryptor: any;
      Encryptor: any;
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  CTRGladman: {
    $super: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    Decryptor: {
      $super: any;
      Decryptor: any;
      Encryptor: any;
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    Encryptor: {
      $super: any;
      Decryptor: any;
      Encryptor: any;
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  ECB: {
    $super: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    Decryptor: {
      $super: any;
      Decryptor: any;
      Encryptor: {
        $super: any;
        Decryptor: any;
        Encryptor: any;
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        init: any;
        mixIn: any;
        processBlock: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    Encryptor: {
      $super: any;
      Decryptor: {
        $super: any;
        Decryptor: any;
        Encryptor: any;
        clone: any;
        create: any;
        createDecryptor: any;
        createEncryptor: any;
        extend: any;
        init: any;
        mixIn: any;
        processBlock: any;
      };
      Encryptor: any;
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  OFB: {
    $super: {
      $super: {
        clone: any;
        create: any;
        extend: any;
        init: any;
        mixIn: any;
      };
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    Decryptor: {
      $super: any;
      Decryptor: any;
      Encryptor: any;
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    Encryptor: {
      $super: any;
      Decryptor: any;
      Encryptor: any;
      clone: any;
      create: any;
      createDecryptor: any;
      createEncryptor: any;
      extend: any;
      init: any;
      mixIn: any;
      processBlock: any;
    };
    clone: any;
    create: any;
    createDecryptor: any;
    createEncryptor: any;
    extend: any;
    init: any;
    mixIn: any;
  };
};

export const pad: {
  AnsiX923: {
    pad: any;
    unpad: any;
  };
  Iso10126: {
    pad: any;
    unpad: any;
  };
  Iso97971: {
    pad: any;
    unpad: any;
  };
  NoPadding: {
    pad: any;
    unpad: any;
  };
  Pkcs7: {
    pad: any;
    unpad: any;
  };
  ZeroPadding: {
    pad: any;
    unpad: any;
  };
};

export const x64: {
  Word: {
    $super: {
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    init: any;
    mixIn: any;
  };
  WordArray: {
    $super: {
      clone: any;
      create: any;
      extend: any;
      init: any;
      mixIn: any;
    };
    clone: any;
    create: any;
    extend: any;
    init: any;
    mixIn: any;
    toX32: any;
  };
};

export function EvpKDF(password: any, salt: any, cfg: any): any;

export function HmacMD5(message: any, key: any): any;

export function HmacRIPEMD160(message: any, key: any): any;

export function HmacSHA1(message: any, key: any): any;

export function HmacSHA224(message: any, key: any): any;

export function HmacSHA256(message: any, key: any): any;

export function HmacSHA3(message: any, key: any): any;

export function HmacSHA384(message: any, key: any): any;

export function HmacSHA512(message: any, key: any): any;

export function MD5(message: any, cfg: any): any;

export function PBKDF2(password: any, salt: any, cfg: any): any;

export function RIPEMD160(message: any, cfg: any): any;

export function SHA1(message: any, cfg: any): any;

export function SHA224(message: any, cfg: any): any;

export function SHA256(message: any, cfg: any): any;

export function SHA3(message: any, cfg: any): any;

export function SHA384(message: any, cfg: any): any;

export function SHA512(message: any, cfg: any): any;

export namespace AES {
  function decrypt(ciphertext: any, key: any, cfg: any): any;

  function encrypt(message: any, key: any, cfg: any): any;

  namespace decrypt {
    const prototype: {};

  }

  namespace encrypt {
    const prototype: {};

  }

}

export namespace DES {
  function decrypt(ciphertext: any, key: any, cfg: any): any;

  function encrypt(message: any, key: any, cfg: any): any;

  namespace decrypt {
    const prototype: {};

  }

  namespace encrypt {
    const prototype: {};

  }

}

export namespace EvpKDF {
  const prototype: {};

}

export namespace HmacMD5 {
  const prototype: {};

}

export namespace HmacRIPEMD160 {
  const prototype: {};

}

export namespace HmacSHA1 {
  const prototype: {};

}

export namespace HmacSHA224 {
  const prototype: {};

}

export namespace HmacSHA256 {
  const prototype: {};

}

export namespace HmacSHA3 {
  const prototype: {};

}

export namespace HmacSHA384 {
  const prototype: {};

}

export namespace HmacSHA512 {
  const prototype: {};

}

export namespace MD5 {
  const prototype: {};

}

export namespace PBKDF2 {
  const prototype: {};

}

export namespace RC4 {
  function decrypt(ciphertext: any, key: any, cfg: any): any;

  function encrypt(message: any, key: any, cfg: any): any;

  namespace decrypt {
    const prototype: {};

  }

  namespace encrypt {
    const prototype: {};

  }

}

export namespace RC4Drop {
  function decrypt(ciphertext: any, key: any, cfg: any): any;

  function encrypt(message: any, key: any, cfg: any): any;

  namespace decrypt {
    const prototype: {};

  }

  namespace encrypt {
    const prototype: {};

  }

}

export namespace RIPEMD160 {
  const prototype: {};

}

export namespace Rabbit {
  function decrypt(ciphertext: any, key: any, cfg: any): any;

  function encrypt(message: any, key: any, cfg: any): any;

  namespace decrypt {
    const prototype: {};

  }

  namespace encrypt {
    const prototype: {};

  }

}

export namespace RabbitLegacy {
  function decrypt(ciphertext: any, key: any, cfg: any): any;

  function encrypt(message: any, key: any, cfg: any): any;

  namespace decrypt {
    const prototype: {};

  }

  namespace encrypt {
    const prototype: {};

  }

}

export namespace SHA1 {
  const prototype: {};

}

export namespace SHA224 {
  const prototype: {};

}

export namespace SHA256 {
  const prototype: {};

}

export namespace SHA3 {
  const prototype: {};

}

export namespace SHA384 {
  const prototype: {};

}

export namespace SHA512 {
  const prototype: {};

}

export namespace TripleDES {
  function decrypt(ciphertext: any, key: any, cfg: any): any;

  function encrypt(message: any, key: any, cfg: any): any;

  namespace decrypt {
    const prototype: {};

  }

  namespace encrypt {
    const prototype: {};

  }

}

